#!/bin/bash

########
# Example Service Definition
#
# Add the following Service Definition in an existing Nagios host config file
# Change the host_name before checking and restarting Nagios
#
# define service{
#        use		      generic-service
#        host_name	      SonicWall_NSA4500_Name
#        service_description  IPSec Tunnels
#        check_command	      check_sw_vpn_tunnels!-P 2c -C public -w 10 -c 15
#
# }
#
########
# Example Command Definition
#
# Add the following Command Definition in a Nagios command config file (i.e., commands.cfg)
#
# 'check_sw_vpn_tunnels' command definition
# define command{
#         command_name    check_sw_vpn_tunnels
#         command_line    $USER1$/check_sw_vpn_tunnels -H $HOSTADDRESS$ $ARG1$
# }
########

# ---------------------------------------------------------
# Settings that might be useful to change
#DEBUG="true"
SNMPWALK_CMD="/usr/bin/snmpwalk"
DEFAULT_OID_STRING=".1.3.6.1.4.1.8741.1.3.2.1.1.1.2" # NSA 4500 SonicWall
#DEFAULT_OID_STRING=".1.3.6.1.4.1.8741.1.3.2.1.1.1.2" # NSA 4500 SonicWall
DEFAULT_COMMUNITY_STRING="public"
DEFAULT_SNMP_VERSION="2c" # Can be one of '1', '2c' or '3'
# That's all, stop editing!
# ---------------------------------------------------------


######### to-do list
# Missing Argument Handling:
# --critical=THRESHOLD
# --warning=THRESHOLD
# --protocol=[1|2c|3]
# --community=STRING
# Variable validation:
# snmp_version=[1|2c|3]
# critical=positive integer, "Invalid critical threshold: $critical"
# warning=positive integer, "Invalid warning threshold: $warning"
# community=single word string
# host=/([-.A-Za-z0-9]+)/, "Host name/address not specified" or "Invalid host: $host"
#########


PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin

PROGNAME=`basename $0`
PROGPATH=`echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION="1.0.0"

. $PROGPATH/utils.sh

[ -n "$DEBUG" ] && echo "DEBUG is turned on"

#
# Function that prints out Usage Information
#
print_usage() {
    echo "Usage:"
    echo "$PROGNAME -H <ip_address> [-w warn_range] [-c crit_range]"
#    echo "$PROGNAME -H <ip_address> [-w warn_range|--warning=THRESHOLD] [-c crit_range|--critical=THRESHOLD]"
    echo "[-C community] [-P snmp_version] [-V|--version] [-h|--help] [-v|--verbose]"
#    echo "[-C community|--community=STRING] [-P snmp_version|--protocol=[1|2c|3] ]"
    echo "[-V|--version] [-h|--help] [-v|--verbose]"
}

#
# Function that prints out Help Information
#
print_help() {
    print_revision $PROGNAME $REVISION
    echo ""
    echo "This plugin checks the number of IPSec tunnels in use on a SonicWall system."
    echo "Tested with an NSA4500"
    echo ""
    print_usage
    echo ""
    echo "Options:"
    echo "-h, --help"
    echo "   Echo this help information"
    echo "-V, --version"
    echo "   Echo version information"
#    echo "-H, --hostname=ADDRESS"
    echo "-H"
    echo "   Host name, IP Address"
#    echo "-C, --community=STRING"
    echo "-C"
    echo "   Optional community string for SNMP communication (default is \"public\")"
#    echo "-P, --protocol=[1|2c|3]"
    echo "-P"
    echo "   SNMP protocol version: one of [1|2c|3]"
#    echo "-w, --warning=THRESHOLD"
    echo "-w"
    echo "   Warning threshold (a single integer)"
#    echo "-c, --critical=THRESHOLD"
    echo "-c"
    echo "   Critical threshold (a single integer)"
    echo "-v, --verbose"
    echo "   Show details of what this script is doing as it's doing it"
    echo ""
    echo "This plugin uses the 'snmpwalk' command."
    echo ""
    support
    exit 0
}

#
# Section that checks command-line Arguments
#
[ -n "$DEBUG" ] && echo "Checking Arguments"
# Set defaults
community=$DEFAULT_COMMUNITY_STRING
snmp_version=$DEFAULT_SNMP_VERSION

# Check for zero arguments
[ "$#" -eq 0 ] && print_usage && exit 0

# Check for other arguments
while test -n "$1"; do
    [ -n "$DEBUG" ] && echo "Current Argument = $1"
    case "$1" in
        --help|-h)
	    print_help
	    exit $STATE_OK
	    ;;
        --version|-V)
	    print_revision $PROGNAME $REVISION
	    exit $STATE_OK
	    ;;
	-v|--verbose)
	    verbose="TRUE"
	    [ -n "$DEBUG" ] && echo "Verbose = $verbose"
	    ;;
	-P)
	    snmp_version=$2
	    [ -n "$DEBUG" ] && echo "SNMP Version = $snmp_version"
	    # Need to validate variable
	    shift
	    ;;
	-c)
	    critical=$2
	    [ -n "$DEBUG" ] && echo "Critical = $critical"
            # Need to validate variable
	    shift
	    ;;
	-w)
	    warning=$2
	    [ -n "$DEBUG" ] && echo "Warning = $warning"
            # Need to validate variable
	    shift
	    ;;
	-C)
	    community=$2
	    [ -n "$DEBUG" ] && echo "Community = $community"
            # Need to validate variable
	    shift
	    ;;
        -H)
	    host=$2
	    [ -n "$DEBUG" ] && echo "Host = $host"
            # Need to validate variable
	    shift
	    ;;
	*)
	    [ -n "$DEBUG" ] && echo "Cannot parse current argument = $1"
            echo "$PROGNAME: Could not parse arguments"
	    print_usage
	    exit 0
	    ;;
    esac
    shift
done

# If critical is less than warning, then report error and exit
[ -n "$critical" ] && [ -n "$warning" ] && [ "$critical" -lt "$warning" ] && echo "ERROR - CRITICAL is less than WARNING: $critical < $warning" && exit $STATE_UNKNOWN
[ -n "$DEBUG" ] && echo "Exited Arg Check logic"

#
# Run the command with the gathered/parsed Arguments
#
[ -n "$DEBUG" ] && echo "Executing: $SNMPWALK_CMD -Cc -v $snmp_version -c $community $host $DEFAULT_OID_STRING"
snmpwalkoutput=`$SNMPWALK_CMD -Cc -v $snmp_version -c $community $host $DEFAULT_OID_STRING`

# If snmpwalk produces an error
status=$?
[ "$status" -eq 1 ] && echo $snmpwalkoutput && exit $STATE_UNKNOWN

# If verbose turned on
[ -n "$verbose" ] && echo "snmpwalk output:" && echo $snmpwalkoutput | awk 'BEGIN { RS="SNMPv2-SMI::" } { print $0 }'

# Count the tunnels (and then subtract one because of RS oddness)
# There's probably a better way of gathering the snmpwalkoutput that doesn't glom
# all the lines together into one line. Then we wouldn't have to change AWK's RS
tunnelcount=`echo $snmpwalkoutput | awk 'BEGIN { RS="SNMPv2-SMI::" } { } END { print NR }'`
if test ${tunnelcount} -gt 0; then
    tunnelcount=$((tunnelcount - 1))
else
    exit $STATE_UNKNOWN
fi

#
# Report back (to Nagios)
#

# If critical is defined and tunnelcount is greater-than or equal to critical, then output Critical stuff and exit
[ -n "$critical" ] && [ "$tunnelcount" -ge "$critical" ] && echo "IPSec CRITICAL - number of tunnels is $tunnelcount (>=$critical)" && exit $STATE_CRITICAL
# If warning is defined and tunnelcount is greater-than or equal to warning, then output Warning stuff and exit
[ -n "$warning" ] && [ "$tunnelcount" -ge "$warning" ] && echo "IPSec WARNING - number of tunnels is $tunnelcount (>=$warning)" && exit $STATE_WARNING

# All other checks passed, so must be OK
echo "IPsec Tunnels: $tunnelcount"
exit $STATE_OK